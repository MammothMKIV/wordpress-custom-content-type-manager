#summary to_array Output Filter
#labels Output-Filters,Function-Reference
#sidebar SidebarOutputFilters

<wiki:toc max_depth="1" />

= Description =

The *to_array* filter is the default output filter for [MultiSelect multi-select] fields: the raw format is normally a JSON string, e.g. one stored by using a .  Selecting the "Array" output filter will convert the JSON string into a PHP array.  It is equivalent to the following:

<font color="red">WARNING</font>: The [TemplateFunctions#print_custom_field print_custom_field()] function isn't useful if you are using the *to_array* output filter: you can't simply print an array, you're going to have to actually _do_ something with it. 

= Usage =

Generic invocation of any Output Filter occurs via the [TemplateFunctions#get_custom_field get_custom_field()] function:

_mixed_ *get_custom_field*( string _$input_ `[`, mixed _$options_ `]` ) 

 * *$input*: _mixed_.  Normally a JSON formatted string, e.g. `["dog","cat","pig"]`
 * *$options*: _none_.
 * *OUTPUT*: _array_. E.g. `array('dog','cat','pig')`

== Example 1==
{{{
<?php
$my_array = get_custom_field('my_field');
foreach ($my_array as $item) {
   print $item;
}
?>
}}}

== Example 2==

If the custom field is set to use a different default Output Filter, you can force the output to use the *to_array* filter by appending _:to_array_ to the fieldname:

{{{
<?php
$my_array = get_custom_field('my_field:to_array');
print implode(', ', $my_array);
?>
}}}

== Example 3==

The functionality here relies on PHP's [http://php.net/manual/en/function.json-decode.php json_decode] function.

{{{ 
// The raw my_multiselect value would be a JSON array, e.g. ["squid","tentacle","ink"]
$raw = get_custom_field('my_multiselect:raw');
$array = json_decode($raw, true);
}}}


= See Also =

 * [to_image_src_OutputFilter to_image_src] Output Filter
 * [to_image_tag_OutputFilter to_image_tag] Output Filter