#summary Customizing Manager HTML

THIS PAGE IS UNDER CONSTRUCTION!! I'm still figuring out functionality here...

With version 0.9.4, you can customize the HTML that appears in the !WordPress manager when displaying your custom fields.  The system here relies on formatting strings, similar in concept to those used by PHP's [http://php.net/manual/en/function.sprintf.php sprintf] function, but instead of using nondescript `%s` instances to denote where values will be placed, we instead use `[+placeholders+]` denoted with square brackets and plus signs.

<wiki:toc max_depth="2" />

= Overview =

Most custom fields use two formatting templates to generate the HTML that you see in the !WordPress manager when you edit or create a post.  The most common formatting templates are as follows:

 * *field* : the field tpl file formats the value and information
 * *wrapper* : the wrapper tpl wraps the field tpl (or field tpls)



= File Locations = 

To begin understanding this, have a look at the `custom-content-type-manager/tpls` directory ("tpls" here is short for "templates").  There is a series of sub-directories there, each one dedicated to formatting a different part of the CCTM's output:

 * *fields* : these templates are what format instances of various fields.  These are probably what you will want to customize the most.
 * *post_selector*: the post-selector is what pops up in a thickbox when you select a relation, image, or media field.
 * *samples* : this is only used to generate sample !WordPress template files; you will probably never need to modify these formatting templates.

|| http://s2.postimage.org/by3ngezo/warning_icon.png || <font color="red">WARNING</font>: do not edit the files in the `custom-content-type-manager/tpls` directory.  Instead, copy the directory (or parts of it) to your `wp-content/uploads/cctm` directory.||


= Fields =

== checkbox ==


Checkbox fields do not have a "repeatable" option.

== colorselector ==

== date ==

== dropdown ==

== image ==

== media ==

== multiselect ==

== relation ==

== text ==

== textarea ==

== wysiwyg ==




Any time a custom field is generated in the !WordPress manager when you create or edit a page, the HTML that generates that form element uses 3 separate template (*.tpl*) files to generate the final output.  The hierarchy is *Field --> Wrapper --> Metabox*:

http://s7.postimage.org/vg0t7txx7/custom_field_wrapping.jpg

Usually, the wrapper wraps only one instance of the field, but if you are dealing with a repeatable field, each repeated instance of the field will use the _field_ template, and collectively all instances of that repeatable field will be wrapped with the wrapper.  

The metabox will contain all fields assigned to it. Currently, only the standard "Custom Fields" meta box is supported.

A more thorough picture of the hierarchy would include multiple field instances:

https://img.skitch.com/20110927-jad2cfqb2kf7b8ijcr3fff3g92.png

-----

=== cctm/tpls/fields ===

The *cctm/tpls/fields* contains tpls used to format instances of a specific field.  For example, if you have a field named *my_field*, you could create a file named *cctm/tpls/fields/my_field.tpl* to format its output.

If there is no dedicated tpl for a given field, a generic tpl for that _type_ of field will be used.  For example, if *my_field* is a dropdown field, the droptown.tpl field located in  *cctm/tpls/fieldtypes/dropdown.tpl* will be used if there is no dedicated tpl inside of the *cctm/tpls/fields* directory.


=== cctm/tpls/fieldtypes ===

This directory contains tpls used to format instances of a type of field, e.g. *text.tpl*, *textarea.tpl*, *dropdown.tpl*, etc.  These tpls are only used if there is no dedicated tpl for a given field inside of the *cctm/tpls/fields* directory.

For example, if you wanted _all_ WYSIWYG fields to use a particular bit of HTML and CSS, you can place a file named *wysiwyg.tpl* inside the *cctm/tpls/fieldtypes* directory.

=== cctm/tpls/wrappers/fields ===

This directory contains tpls that will be used to wrap the field tpls.  All built-in fields use the same wrapper: *_default.tpl*.  You can specify the wrapper used for any specific field by placing a tpl file in the  *cctm/tpls/wrappers/fields* directory and naming it after the field, e.g. *my_field.tpl*

=== cctm/tpls/wrappers/fieldtypes ===

This directory contains tpls that will be used to wrap the field tpls.  You can specify the wrapper used for any type field by placing a tpl file in the  *cctm/tpls/wrappers/fieldtype* directory and naming it after the fieldtype, e.g. *dropdown.tpl*


=== cctm/tpls/metaboxes/{post_type} ===

The directory contains tpls that are used to format the final output before it is printed inside of a metabox for a given _post_type_.  If you want the default metabox for your *books* post type to use a specific tpl, create the directory *cctm/tpls/metaboxes/books* and create a file named *_default.tpl*.