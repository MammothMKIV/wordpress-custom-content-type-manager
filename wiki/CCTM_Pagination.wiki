#summary CCTM_Pagination class reference
#labels Function-Reference,Technical
#sidebar SidebarFunctionReference

<wiki:toc max_depth="1" />

= Introduction =

The CCTM_Pagination class is a library for generating pagination links.  It is used by the GetPostsQuery class, for example when you select a post or image in a custom field:

http://content.screencast.com/users/fireproofsocks/folders/Jing/media/f0d80440-d3d4-4f3d-a776-acbd94a48e9f/00000107.png


= Formatting Templates (tpls) =

Pagination links are generated by assembling together a series of formatting strings (a.k.a templates or "tpls" for short).

This text graphic shows some sample links and the formatting tpl that applies to each part of the output:

{{{
	<<First <<Prev 1 2 3 Next>> Last>>
	\_____/ \____/ ^ ^ ^ \____/ \____/
	   |       |   | | |    |      +----- lastTpl
	   |       |   | | |    +------------ nextTpl
	   |       |   | | +----------------- currentPageTpl
	   |       |   +-+------------------- pageTpl
	   |       +------------------------- prevTpl
	   +--------------------------------- firstTpl

\_________________________________________________/
                    |
                    +-------------------- outerTpl
}}}

=== Placeholders ===

The following placeholders are available throughout the tpls.  There are some others available only to the *outerTpl* (see below).

 * `[+base_url+]` : This is the URL of the page containing your get_posts query.  
 * `[+offset+]` : Contains an integer representing the offset.  You must read this from the URL and pass it back into your get_posts arguments.
 * `[+page_number +]` : instead of an offset number, this will print an integer for a page, e.g. when used in the *currentPageTpl*, it will contain the number of the current page, when used in the *nextTpl* it will contain the number for the next page, etc.



See the includes/CCTM_Pagination.conf.php for some examples.  The idea was to hard-code some variations in link styles in that file.

== firstTpl == 

Used to format the link that takes you back to the very first page of results.  

*Sample:*

{{{
<a href="[+base_url+]&offset=[+offset+]">&laquo; First</a> &nbsp;
}}}

== lastTpl ==

Used to format the link that takes you back to the very last page of results.  

*Sample:*

{{{
&nbsp;<a href="[+base_url+]&offset=[+offset+]">Last &raquo;</a>
}}}


== prevTpl ==

Used to format the link that takes you back one page.

*Sample:*

{{{
<a href="[+base_url+]&offset=[+offset+]">&lsaquo; Prev.</a>&nbsp;
}}}

== nextTpl ==

Used to format the link that takes you forward one page.

*Sample:*
{{{
&nbsp;<a href="[+base_url+]&offset=[+offset+]">Next &rsaquo;</a>
}}}

== currentPageTpl ==

Used to format the number representing the current page.  You don't need to link to the page you're already on.

*Sample:*
{{{
&nbsp;<span>[+page_number+]</span>&nbsp;
}}}

== pageTpl ==

Used to format the links that take you directly to a given page.

*Sample:*
{{{
&nbsp;<a href="[+base_url+]&offset=[+offset+]">[+page_number+]</a>&nbsp;
}}}

== outerTpl ==

Wraps the final output.  This has a  couple special placeholders.

 * `[+content+]` : you *must* use this placeholder.  All other links and HTML will replace this placeholder.
 * `[+current_page+]` : contains the number of the current page. Useful for messaging the user.
 * `[+page_count+]` : shows the total number of pages in the result set. 
 * `[+first_record+]` : number representing the first record visible on this page. 
 * `[+last_record+]` : number representing the last record visible on this page. 
 * `[+record_count+]` : number representing the total number of records in the result set. 
 
*Sample:*

{{{
<div id="pagination">
	[+content+]<br/>
	Page [+current_page+] of [+page_count+]<br/>
	Displaying records [+first_record+] thru [+last_record+] of [+record_count+]
</div>
}}}

----

= Arguments =

It's important to review the arguments to the CCTM's [get_posts] function: some of those arguments directly affect pagination.  You don't have to use GetPostsQuery to use the CCTM_Pagination class, it's just common, so we demonstrate it here.

== get_posts ==

 * limit (int) : this limits the number of records returned by a single query AND it sets the number or records visible on each page.
 * offset (int) : this controls the offset in the !MySQL query. For creating a page containing dynamic paginated results, you should read the offset out of the URL parameters and pass it back into your 
 * paginate (boolean) : set this to true if you want to paginate your results. 



----
= Examples =

== Usage Example 1 (GetPostsQuery) ==

This example creates a simple link for "Older posts" -- it uses only a small portion of the available formatting templates.

|| http://s2.postimage.org/by3ngezo/warning_icon.png || When reading variables out of the URL, make sure you sanitize your data!  Using `(int)` to type-cast your variable to an integer is strong protection against SQL-Injection attacks, e.g. look closely at this line in the example below: `$args['offset'] = (int) $_GET['offset'];` || 


{{{
// Define the query
$args = array();
$args['post_type'] = array('my_post_type');
$args['search_columns'] = array('post_title', 'post_content','some_custom_field');
//$args['taxonomy'] = 'category';
//$args['taxonomy_slug'] = '';
$args['orderby'] = 'post_date';
$args['date_format'] = 'F j, Y';
$args['limit'] = 20;
$args['paginate'] = true;

// Read the offset variable (VERY IMPORTANT!)
if (isset($_GET['offset'])) {
	$args['offset'] = (int) $_GET['offset'];
}


// Pagination formatting
$tpls = array();
$tpls['prevTpl'] = '<div class="nav-next"><a href="[+base_url+]&[+offset_key+]=[+offset+]" [+extra+]>Newer posts <span class="meta-nav">&rarr;</span></a></div>';
$tpls['nextTpl'] = '<div class="nav-previous"><a href="[+base_url+]&[+offset_key+]=[+offset+]" [+extra+]><span class="meta-nav">&larr;</span> Older posts</a></div>';
$tpls['outerTpl'] = '<div id="nav-below" class="navigation">[+content+]</div>';
$Q->set_tpls($tpls);

$results = $Q->get_posts($args);

foreach ($results as $r) {
    // print out a bit about each post in the result set... 
}

print $Q->get_pagination_links();

}}}


== Usage Example 2 (GetPostsQuery) ==

If you want to create something more involved than the simple "next/prev" type of links, then you need to use more of the formatting strings.

== Usage Example 3 (standalone)==

You don't have to use the CCTM_Pagination library with the GetPostsQuery class.  You can use the CCTM_Pagination library all by itself.

It's important to remember that the only thing the class absolutely needs is a count of the number of results you are paginating.  This normally comes from a database COUNT(*) operation of some sort, but strictly speaking, the CCTM_Pagination class doesn't care where you get your information.

=== <font color="green">public function set_base_url()</font>===

_void_ *set_base_url*( string _$url_ )

Set the URL to be used as the base for the links.  This can be relative or absolute.  If you are not using friendly URLs and you have some CGI parameters that you wish to persist between pages, then you must include these when you set the base url. Default: "?"

=== <font color="green">public function set_base_url()</font>===

_void_ *set_extra*( string _$txt_ )


 * set_offset
 * set_results_per_page
 * set_tpls

 * get_lowest_visible_page($current_pg, $pgs_visible, $total_pgs)
 * get_next_page($current_pg, $total_pgs)
 * paginate($record_count)
 * set_base_url($base_url='')
 * offset_to_page($offset, $results_per_page)
 * page_to_offset($page, $results_per_page)

Create setter functions for:

 * number_of_pagination_links_displayed
 * next_prev_jump_size

IN PROGRESS...

{{{
<?php

// in your template file...

$tpls['firstTpl'] = '';
$tpls['lastTpl'] = '';
$tpls['prevTpl'] = '';
$tpls['nextTpl'] = '';
$tpls['currentPageTpl'] = '';
$tpls['pageTpl'] = '';
$tpls['outerTpl'] = '';

}}}