#summary Available Output Filters: how to control how data is displayed in your themes
#labels Help,Output-Filters
#sidebar SidebarOutputFilters

The functionality of Output Filters was greatly enhanced in version 0.9.4 of the CCTM.  The reason they exist is pretty much the same reason !WordPress uses its own [http://codex.wordpress.org/Plugin_API filters]: they are used to modify data before sending it to the browser screen.

The reason Output Filters were implemented into the plugin was due primarily to the numerous emails I received from confused users asking [CreateImageField  how to get an image to appear in their theme files].  "I only see a number! WTF?!?" 

All you have to remember is that the only thing that's stored in your custom image fields is the _ID_ of the image you selected (it's a [http://en.wikipedia.org/wiki/Foreign_key foreign key]).  Most of the time, you don't want the number itself, you want the image that is _represented_ by that number.  The solution is to use an Output Filter to convert the number into an img tag or to the src of the image.

<wiki:video url="http://www.youtube.com/watch?v=8VKvwHncOEE" />

== Default Output Filter ==

Every custom field can specify a Default Output Filter.  This filter will be used on any standard instance of `get_custom_field()` or `print_custom_field()`.

If you have a custom field name *my_field* and you have defined it to use a default output filter of [to_image_src_OutputFilter to_image_src], then the following two calls to `get_custom_field()` are equivalent:

{{{
<?php
get_custom_field('my_field');  // <-- uses the default output filter
get_custom_field('my_field:to_image_src'); // <-- verbosely specifies the output filter
?>
}}}

*REMEMBER:* specifying an output filter by name will *_override_* any default output filter set.

== Chaining ==

You can chain several Output Filters together by appending their names after a colon:

{{{
<?php
get_custom_field('my_field:filter1:filter2:etc');
?>
}}}

You can supply options to each filter by suppling additional arguments to the `get_custom_field()` or `print_custom_field()`functions: 

{{{
<?php
get_custom_field('my_field:filter1:filter2', 'option 1', 'option 2');
?>
}}}

The first option argument is passed to the first filter (or to the default filter); the second option argument is passed to the second filter, and so on:

https://img.skitch.com/20110926-b7nqtrgeqn7pfcgckm6qcuwghd.png


== Standalone Use ==

Although the primary use of Output Filters is when they are used directly to modify the output of a custom field, the functions can also be called on their own: they are functions that modify an input.  Use the `CCTM::filter()` function to filter input through any of the available output filters.

{{{
<?php
$filtered_value = CCTM::filter( $value, $filtername [, $options]);
?>
}}}

 * *$value* : the value that you want to filter
 * *$filtername* : any valid output filter
 * *$options* : some filters use options to affect their output.  See the documentation for each filter.