#summary Available Output Filters: how to control how data is displayed in your themes
#labels Help

The functionality of Output Filters was greatly enhanced in version 0.9.4 of the CCTM.  The reason they exist is pretty much the same reason !WordPress uses its own [http://codex.wordpress.org/Plugin_API filters]: use them to modify data of various types before  sending it to the browser screen.

The reason Output Filters were implemented into the plugin was due primarily to the numerous emails I received from confused users asking [CreateImageField  how to get an image to appear in their theme files].  "I only see a number! WTF?!?" 

All you have to remember is that the only thing that's stored in your custom image fields is the _ID_ of the image you selected (it's a [http://en.wikipedia.org/wiki/Foreign_key foreign key]).  Most of the time, you don't want the number itself, you want the image that is _represented_ by that number.  The solution is to use an Output Filter to convert the number into an img tag or to the src of the image.

<wiki:toc max_depth="2" />

== Default Output Filter ==

Every custom field can specify a Default Output Filter.  This filter will be used on any standard instance of `get_custom_field()` or `print_custom_field()`.


== Standalone Use ==

Although the primary use of Output Filters is when they are used directly to modify the output of a custom field, the functions can also be called on their own.


*Available Output Filters*



----

== None ==

This is the default value for many field types, and it was the _only_ option available prior to version 0.8.9 of the plugin.

----
== Array ==
This is the default output filter for [MultiSelect multi-select] fields: the raw format is a JSON string.  Selecting the "Array" output filter will convert the JSON string into a PHP array.  It is equivalent to the following:

{{{ 
$raw = get_custom_field('my_image');
$array = json_decode($raw, true);
}}}

The `print_custom_field()` function isn't useful if you have a [MultiSelect multi-select] field using the Array output filter: you can't simply print an array, you're going to have to do something with it. 

See also the "Format List" output filter.

----

== Encode Email Address ==

This should be used for text fields that you use to store and display email addresses.  When you are using this output filter, the output is encrypted to help deter your email addresses from being harvested by spam bots.

Warning: this is only a _deterrent_!  We can't guarantee that your email addresses won't be harvested!


----

== Formatted List ==

The "Formatted List" output filter takes an array and formats it formats it into a sensible string for your theme files.

=== Options ===

The `print_custom_field()` and `get_custom_field()` functions will accept additional arguments.

*$separator*  (string) : If one additional string argument is supplied, this  value is used as separator and it will be used to join all array elements together.

Example 1:
{{{
print_custom_field('my_multi', ', ');
// prints a comma-separated list: man, bear, pig
}}}

*$formatting_strings* (array) : if an array of values is passed to the $options parameter, they are expected to be valid formatting strings that use `[+placeholders+]`.

 # First item in array: used to format each item in the list.  Available placeholders: 
 * *`[+value+]`* : will be replaced with the value of the item
 # Second item in array: used to wrap the final output.  Available placeholders:
 * *`[+content+]`*: will be replaced with all formatted items

The 2nd array element is optional: use it for greater control.

Example 2:
{{{
print_custom_field('my_mult', array('<li>[+value+]</li>','<ul>[+content+]</ul>') );
/* prints a formated unordered list:
<ul>
  <li>man</li>
  <li>bear</li>
  <li>pig</li>
</ul>
*/
}}}



----

== Image src ==

This converts a relation or image field's value into the full path to the image.  Use the !Image src output filter if you want to return the full path to the image, for example for use in your own image tag or link.

For example, if the my_image field has the "Image src" output field enabled, 

{{{ 
print_custom_field('my_image');
}}}
prints something like
{{{
http://yoursite.com/wp-content/uploads/2011/03/IMG_1045.jpg
}}}

----

== Full `<img>` tag ==

Use this output filter if you want to return a full image tag for your image.  This is the default output filter for image fields starting with version 0.8.9.

For example, if the my_image field has the "Full `<img>` tag" output field enabled, 

{{{
print_custom_field('my_image');`
}}}
Might return a value like:
{{{
<img width="640" height="480" 
 src="http://yoursite.com/wp-content/uploads/2011/03/IMG_1045.jpg" 
class="attachment-" alt="IMG_1045" title="IMG_1045" />
}}}

===Options===
Available options include the following:

 * thumbnail
 * medium 
 * large 
 * full (default)
 * or a 2-item array representing width and height in pixels

And any option available to the *size* paramter of the [http://codex.wordpress.org/Function_Reference/wp_get_attachment_image wp_get_attachment_image()] function.

----

== Array of image src, width, height ==

Instead of returning a single value for the image's src or a full image tag, this option causes 3 attributes from the image to be returned from the call to *get_custom_field()*: 
 
 * The image src
 * The image width
 * The image height

You can use the PHP [http://php.net/manual/en/function.list.php list] pragma to feed this array into 3 separate variables:

{{{
<?php list($src, $w, $h) = get_custom_field('my_image'); ?>
}}}

===Options===
Available options include the following:

 * thumbnail
 * medium 
 * large 
 * full (default)
 * or a 2-item array representing width and height in pixels

And any option available to the *size* paramter of the [http://codex.wordpress.org/Function_Reference/wp_get_attachment_image wp_get_attachment_image()] function.