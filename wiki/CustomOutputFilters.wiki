#summary Writing your own Output Filter
#labels Output-Filters
#sidebar SidebarOutputFilters

<wiki:toc max_depth="1" />

= Description =

Starting with version 0.9.5 of the CCTM, developers can write their own [OutputFilters Output Filters].  All that's required is that you write a PHP class that extends the *CCTM_OutputFilter* class.  That class is an [http://php.net/manual/en/language.oop5.abstract.php abstract class].  If you haven't used abstract classes before, check out Aleem Bawany's helpful explanation of them: [http://aleembawany.com/2010/04/03/understanding-abstract-classes-in-php/ Abstract Classes in PHP].  In a nutshell, they allow me to define what a class should look like, then the child class must implement the necessary functions.  That means each Output Filter follows a pattern: each class has a predictable set of functions that the CCTM expects.

You can see examples of the built-in Output Filters inside of *custom-content-type-manager/includes/filters*.

Developers can save their own filters inside of *wp-content/uploads/cctm/filters*


= The Base Class =

By looking at the base class inside of *wp-content/plugins/custom-content-type-manager/includes/CCTM_OutputFilter.php*, you can see the following variables and methods.  Here's a brief description of each variable and function.

=== public $show_in_menus ===

_boolean_ : whether or not the filter should be listed in the field definitions as a selectable filter.
	
=== public function filter()===

This is where the magic happens.  This is where you put the code that will modify (i.e. filter) the input and return the modified output.

*INPUT*

*$input* _mixed_  : this is either the raw input coming from the [get_custom_field get_custom_field()] function or if you're chaining Output Filters together, the input to this function will be the output from the previous function.

*options* _mixed_ (optional): if your filter takes any arguments, this is where they'll be sent.

*OUTPUT*

_mixed_ : the modified input.

=== public function get_description()===

Get the human readable description of what it is your filter does.

*OUTPUT*

_string_ : a text description.

===public function get_example()===

Show the user how to use the filter inside a template file.

*INPUT*
*$fieldname* _string_ -- the name of the field to use in displaying examples.

*OUTPUT*

_string_: demonstrate how to use the filter inside a template file.

===public function get_name()===

*INPUT*

_none_

*OUTPUT*

_string_: The human-readable name of the filter.

===public function get_url()===
*INPUT*
_none_
*OUTPUT*
_string_: The URL where the user can read more about the filter.

-------------------

= Sample Output Filter Class =

So that's all well and good, but let's have a look at how we might actually write our own filter.  Create a file named *demo.php* inside of *wp-content/uploads/cctm/filters* (create the directories if they don't already exist.

== Naming Conventions ==

 * Name your files in _all lowercase_!
 * Do not use any spaces or dashes in the name!
 * The name of the class _must_ correspond exactly to the base name of the file.  The classname will have a prefix of "CCTM_" and it will not use the ".php" extension.  E.g. if your filter is named "my_filter", then your filename would be *my_filter.php* and your classname will be "CCTM_my_filter".

== Sample Class ==

Create a file named *demo.php* and save it into *wp-content/uploads/cctm/filters*.  Paste the following code:

{{{
<?php
/**
 * @package CCTM
 * 
 * Just a demonstration of a custom output filter
 */

class CCTM_demo extends CCTM_OutputFilter {

	/**
	 * Apply the filter.
	 *
	 * @param 	string 	input
	 * @param	 mixed	optional arguments to return if the input is empty
	 * @return string
	 */
	public function filter($input, $options=null) {
		return $input . ' ZORRO WAS HERE!!!';
	}


	/**
	 * @return string	a description of what the filter is and does.
	 */
	public function get_description() {
		return 'The <em>demo</em> filter appends "ZORRO WAS HERE!!!" to everything it filters.';
	}


	/**
	 * Show the user how to use the filter inside a template file.
	 *
	 * @return string 	a code sample 
	 */
	public function get_example($fieldname='my_field') {
		return "<?php print_custom_field('$fieldname:demo'); ?>";
	}

	/**
	 * @return string	the human-readable name of the filter.
	 */
	public function get_name() {
		return 'Demo';
	}

	/**
	 * @return string	the URL where the user can read more about the filter
	 */
	public function get_url() {
		return 'http://code.google.com/p/wordpress-custom-content-type-manager/wiki/OutputFilters';
	}
}
/*EOF*/

}}}

That's it.  We didn't have to use the *$show_in_menus* variable, because we're fine with the default (true).