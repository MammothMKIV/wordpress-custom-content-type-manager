#summary Documentation for WYSIWYG custom fields
#labels Custom-Fields
#sidebar SidebarCustomFields

||http://s8.postimage.org/5q2dpjybl/wysiwyg.png||A What-you-see-is-what-you-get (WYSIWYG) field is a textarea with formatting controls like you might see in a word processor (e.g. Microsoft Word).  It allows users to format text without needing to know HTML markup codes.||

|| http://s2.postimage.org/by3ngezo/warning_icon.png || <font color="red">*RECOMMENDATION*</font>: always include the main content block and the title with your post-type definitions.  !WordPress gets really weird without these fields.||

Note that some functionality does not work with these extended WYSIWYG (e.g. full-screen mode).  This is due to shortcomings in how !WordPress has integrated TinyMCE.

<wiki:toc max_depth="2" />


----

== Field Definition (Meta Data)==

The field definition affects how instances of this field type will display in the !WordPress manager while creating or posts that contain instances of this field type.

 * *label* : the label identifies this field when you create or edit a post in the !WordPress manager
 * *name* : the name is a unique identifier used when saving values for instances of this field; it corresponds to the *meta_key* column *wp_postmeta* table.  You will use this name when retrieving field values inside of your themes via the `print_custom_field()` or `get_custom_field()` functions.
 * *description* : the description provides extra information to users as they create or edit a post in the !WordPress manager.
 * *class* : this affects the CSS class in the !WordPress manager that is used to display instances of this field type.
 * *extra* : this can be used to provide additional parameters to the text input, e.g. `rows="2" cols="20"` or custom javascript.. 
 * *default_value* : This is used to determine the default value for new instances of this field type. 
 * *output_filter*: choose an output filter...

----

== Included Javascript/CSS files ==

 * `/js/wysiwyg.js` Requires jquery, editor, thickbox, media-upload
 * `thickbox` (built-in !WordPress script)

----

== Example of Use  in Template File ==


=== Example 1 ===

{{{
<?php print_custom_field('my_wysiwyg'); ?>
}}}

=== Example 2: Array ===

Will join all the instances of your WYSIWYG fields if your field is "repeatable".

{{{
<?php print_custom_field('my_wysiwyg:formatted_list', '<hr/>'); ?>
}}}



=== Recommended Output Filters ===

 * [to_array_OutputFilter to_array] (if you have "repeatable" checked).


----

== Customizing Manager HTML ==

Colorselector fields use the 2 standard tpls: field and wrapper.  See [CustomizingManagerHTML] for more information.

|| http://s2.postimage.org/by3ngezo/warning_icon.png || <font color="red">*WARNING*</font>: the functionality of !WordPress' implementation of TinyMCE changed drastically in version 3.3, so the formatting methods here are likely to change.||

==== Field tpl====

The first of following tpls found will be used to format the field:

 * `fields/elements/{fieldname}.tpl`
 * `fields/elements/_wysiwyg.tpl`
 * `fields/elements/_default.tpl`

==== Wrapper tpl ====

The first of the following tpls found will be used to wrap the output:

 # `fields/wrappers/{fieldname}.tpl`
 # `fields/wrappers/_wysiwyg.tpl`
 # `fields/wrappers/_default.tpl`

=== Multi ===

Text fields can be repeatable.  If the "repeatable" option is checked, the following tpls are used to format the output:


==== Field tpl====

The first of following tpls found will be used to format the field:

 # `fields/elements/{fieldname}.tpl`
 # `fields/elements/_wysiwyg_multi.tpl`

==== Wrapper tpl ====

The first of the following tpls found will be used to wrap the output:

 # `fields/wrappers/{fieldname}.tpl`
 # `fields/wrappers/_wysiwyg_multi.tpl`