#summary Example queries using the GetPostsQuery::get_posts() method
#labels Function-Reference,Technical
#sidebar SidebarFunctionReference

This page contains examples of how to use the !GetPostsQuery class' [get_posts] function.   This function offers a powerful and flexible interface into the !WordPress database.  It allows you to retrieve posts and their related data via a unified API via efficient database queries, and it avoids the confusing and inconsistent !WordPress functions.

If you're unclear on how to call the function, see [calling_get_posts Calling get_posts()].

<wiki:toc max_depth="2" />

----

= Examples =

This section is focused on example queries possible with get_posts.  

IN PROGRESS...

== List Posts in a Category ==

In your template file, you can list all posts in a category by making use of the `taxonomy` and `taxonomy_slug` arguments.

{{{
<?php
$Q = new GetPostsQuery();
$args = array();
$args['post_type'] = 'article';
$args['post_status'] = 'publish';
$args['taxonomy'] = 'category';
$args['taxonomy_slug'] = 'howto';
$args['post_status'] = 'publish';
$args['orderby'] = 'menu_order';
$args['order'] = 'ASC';

$results = $Q->get_posts($args);

foreach ($results as $r):
?>
	<a href="<?php print $r['permalink']; ?>" rel="bookmark"><?php print $r['post_title']; ?></a> <br />
<?php
endforeach;
?>
}}}



== List Posts in a Date Range ==



== Searching For a Search Term (1) ==


== Searching For a Search Term (2) ==

-----

= Troubleshooting =

== get_posts returns the completely wrong post ==

Be careful that you don't accidentally use `get_post` when you meant to use `get_posts`.  `get_post` expects an integer post ID as input, so if you instead pass it a series of arguments intended for `get_posts`, this will evaluate to some integer via some incomprensible bit of PHP number crunching, and you may get a result from the database that is completely unexpected.