#summary Example queries using the GetPostsQuery::get_posts() method
#labels Function-Reference,Technical
#sidebar SidebarFunctionReference

This page contains examples of how to use the !GetPostsQuery class' [get_posts] function.   This function offers a powerful and flexible interface into the !WordPress database.  It allows you to retrieve posts and their related data via a unified API via efficient database queries, and it avoids the confusing and inconsistent !WordPress functions.

If you're unclear on how to call the function, see [calling_get_posts Calling get_posts()].

<wiki:toc max_depth="2" />

----

= Examples =

This section is focused on example queries possible with get_posts.  

IN PROGRESS...

== List Posts in a Category ==

In your template file, you can list all posts in a category by making use of the `taxonomy` and `taxonomy_slug` arguments.

{{{
<?php
$Q = new GetPostsQuery();
$args = array();
$args['post_type'] = 'article';
$args['post_status'] = 'publish';
$args['taxonomy'] = 'category';
$args['taxonomy_slug'] = 'howto';
$args['post_status'] = 'publish';
$args['orderby'] = 'menu_order';
$args['order'] = 'ASC';

$results = $Q->get_posts($args);

foreach ($results as $r):
?>
	<a href="<?php print $r['permalink']; ?>" rel="bookmark"><?php print $r['post_title']; ?></a> <br />
<?php
endforeach;
?>
}}}


== List Posts Hierarchically by Category ==

<font color="red">Warning: This is tough.</font>  The problem is that people usually place posts into BOTH the parent AND the sub-category, so when you iterate through the posts in each category, the post will be listed in 2 or more places.

For example, if you have a category named "Mammals" and a child-category of mammals named "Dogs".  When you create a new "animal" post, for example, most users will check _both_ the parent "Mammals" category and the child "Dogs" category.  This can present a problem when you are trying to list posts hierarchically because technically speaking, the post now exists in _both_ categories, so it will show up in _both_ lists.  The problem is compounded by the fact that !WordPress GUI does not behave gracefully when you don't place a post into the parent and the child categories.

Nevertheless, here is an example of how you might generate a list of posts by categories:

{{{
<?php
$cats = get_categories(array('child_of' => $cat)); 

foreach ($cats as $c) {

	print '<h1>'. $c->name . '</h1>';

	// Parent Categories (optionally omit this) --------
	$Q = new GetPostsQuery();
	$args = array();
	$args['post_type'] = 'article';
	$args['taxonomy'] = 'category';
	$args['taxonomy_depth'] = 1;
	$args['taxonomy_slug'] = $c->slug;

	$results = $Q->get_posts($args);

	// These are any posts that are in the parent category
	foreach ($results as $r) {
		printf('<a href="%s">%s</a><br/>', $r['permalink'], $r['post_title']);
	}
	//----- (omit to here) ------------------------

	$subcats = get_categories(array('child_of' => $c->slug)) {

	foreach ($subcats as $s) {	
		
		// Sub Categories
		print '<h2>'. $s->name . '</h2>';
		
		$Q = new GetPostsQuery();
		$args = array();
		$args['post_type'] = 'article';
		$args['taxonomy'] = 'category';
		$args['taxonomy_depth'] = 1;
		$args['taxonomy_slug'] = $s->slug;
	
	
		$results = $Q->get_posts($args);
		
		foreach ($results as $r) {
			printf('<a href="%s">%s</a><br/>', $r['permalink'], $r['post_title']);
		}
	}
}
?>
}}}

In the above example, you may choose to omit the query that selects posts in the parent category.  If you omit that line, your results may become cleaner, but some posts may disappear off the radar.  For example, if you have a post that is _only_ in the "Mammals" parent category and you aren't printing those posts, the post will not be visible.

This problem occurs at every level in the hierarchy!


== List Posts in a Date Range ==

A date range with just one parameter is easier than a from/to date range.  If you just need posts that are before or after a certain date, just use an operator in your arguments, e.g. the ">" greater than operator:

{{{
<?php
$Q = new GetPostsQuery();
$args = array();
$args['post_type'] = 'page';
$args['post_date']['>'] = '2005-01-30';
$args['order'] = 'ASC';

$results = $Q->get_posts($args);

foreach ($results as $r):
    // print stuff here
endforeach;
?>
}}}

For using a date range, you should refer to the [get_posts] documentation, specifically the *date_min* and *date_max* and *date_column* arguments.

{{{
<?php
$Q = new GetPostsQuery();
$args = array();
$args['post_type'] = 'page';
$args['date_column'] = 'post_date';
$args['date_min'] = '2007-03-01';
$args['date_max'] = '2007-03-31';
$args['order'] = 'ASC';

$results = $Q->get_posts($args);

foreach ($results as $r):
    // print stuff here
endforeach;
?>
}}}

You can also use the *date_min* and *date_max* to filter on a custom date field, <font color="red">*but you must store your dates in the MySQL format!*</font>  This is critical: you can use the [datef_OutputFilter] to display dates to your visitors however you want, but it is strongly recommended that you always store your date values in a sensible, sortable.

{{{
<?php
$Q = new GetPostsQuery();
$args = array();
$args['post_type'] = 'movie';
$args['date_column'] = 'release_date';
$args['date_min'] = '2007-03-01';
$args['date_max'] = '2007-03-31';
$args['order'] = 'ASC';

$results = $Q->get_posts($args);

foreach ($results as $r):
    // print stuff here
endforeach;
?>
}}}

----

== Searching For a Search Term (1) ==


== Searching For a Search Term (2) ==

-----

= Troubleshooting =

== get_posts returns the completely wrong post ==

Be careful that you don't accidentally use `get_post` when you meant to use `get_posts`.  `get_post` expects an integer post ID as input, so if you instead pass it a series of arguments intended for `get_posts`, this will evaluate to some integer via some incomprensible bit of PHP number crunching, and you may get a result from the database that is completely unexpected.