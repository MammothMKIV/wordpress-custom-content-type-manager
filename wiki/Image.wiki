#summary Documentation for Image custom fields
#labels Custom-Fields
#sidebar SidebarCustomFields



||http://s8.postimage.org/jqdm96etd/image.png||This allows users to select a valid image that has been uploaded into the !WordPress Media library.||

Custom image fields are used to store a foreign key reference to another post, specifically to an "attachment" post representing an image.  Because the raw post_id of the attachment post is not terribly useful in and of itself, image fields most often use some kind of [OutputFilters Output Filter] that will convert the ID into an image tag or the image src.

<wiki:toc max_depth="2" />

----

== Field Definition (Meta Data)==

The field definition affects how instances of this field type will display in the !WordPress manager while creating or posts that contain instances of this field type.

 * *label* : the label identifies this field when you create or edit a post in the !WordPress manager
 * *name* : the name is a unique identifier used when saving values for instances of this field; it corresponds to the *meta_key* column *wp_postmeta* table.  You will use this name when retrieving field values inside of your themes via the `print_custom_field()` or `get_custom_field()` functions.
 * *description* : the description provides extra information to users as they create or edit a post in the !WordPress manager.
 * *class* : this affects the CSS class in the !WordPress manager that is used to display instances of this field type.
 * *extra* : this can be used to provide additional parameters to the text input, e.g. `size="10"` or custom javascript.. 
 * *default_value* : This is used to determine the default value for new instances of this field type. 
 * *output_filter* : [OutputFilters Output Filters] control how data is filtered before being sent to your theme files. A recommended default output filter for an image field would be: to_image_src, to_image_tag, or to_image_array

----

== Included Javascript/CSS files ==

 * `media-upload` (built-in WordPress script)
 * `thickbox` (built-in WordPress script);
 * `/js/relation.js`

----

== Example of Use  in Template File ==


=== Example 1: Retrieve the src of the Image ===

Here we show how to use the [to_image_src_OutputFilter to_image_src] Output Filter:

{{{
<img src="<?php print_custom_field('my_image:to_image_src'); ?>" />
}}}

|| http://s2.postimage.org/by3ngezo/warning_icon.png || In the case of an image field with no output filter, `print_custom_field('fieldname');` or `print_custom_field('fieldname:raw');`will return _an integer number_ representing the ID of the image post that has been referenced!  || 


===Example 2: Get the Full `<img>` tag===

When the *Full `<img>` tag* output filter is selected ([to_image_tag_OutputFilter to_image_tag]), the output of the `print_custom_field('fieldname');`function is a complete `<img>` tag.  The returned result relies on the [http://codex.wordpress.org/Function_Reference/wp_get_attachment_image_src wp_get_attachment_image_src()] function.

Remember that you can pass as an option any valid option for the *size* parameter in the [http://codex.wordpress.org/Function_Reference/wp_get_attachment_image wp_get_attachment_image()] function, e.g. 

{{{
print_custom_field('my_image:to_image_tag', 'thumbnail');
// Might output something like 
// <img src="wp-content/uploads/2012/03/14/thumbnail.jpg" />
}}}


=== Example 3: Array of image src, width, height===


The [to_image_array_OutputFilter to_image_array] output filter is intended for users who require a bit more control in their theme files: instead of returning a _string_ value,  it returns an _array_ containing the the referenced image's src, width, and height, for example:

{{{
<?php
list($src, $w, $h) = get_custom_field('my_image:to_image_array');
?>
<img src="<?php print $src; ?>" width="<?php print $w; ?>" height="<?php print $h; ?>" />
}}}

Or:

{{{
<?php
$my_array = get_custom_field('my_image');
// print_r($my_array);
<img src="<?php print $my_array[0]; ?>" width="<?php print my_array[1]; ?>" height="<?php print $my_array[2]; ?>" />
}}}

To achieve the same effect in your themes _without_ the use of this output filter, you would make use of the [http://codex.wordpress.org/Function_Reference/wp_get_attachment_image_src wp_get_attachment_image_src()] function, e.g.:

{{{
global $post;
$image_id = get_post_meta($post->ID, $fieldname, true);
list($src, $w, $h) = wp_get_attachment_image_src( $image_id, 'full', true);
}}}

|| http://s2.postimage.org/by3ngezo/warning_icon.png || *Using this output filter will effectively break any instances of `print_custom_field()`: use `get_custom_field()` instead.*  This is because an _ARRAY_ is returned, so you can't simply print it; you must iterate over its contents. ||


=== Example 4: Retrieving Multiple Images ===

Since image fields support the "repeatable" option, your field might store an array of images.  Any time you use the "repeatable" option, you'll want to use the [to_array_OutputFilter to_array] Output Filter.


{{{
<?php
$array_of_images = get_custom_field('my_images:to_array');

foreach ($array_of_images as $img_id) {
   print CCTM::filter($img_id, 'to_image_tag');
}
}}}

Note here that we are using a foreach loop to iterate over the array, and we're using the [CCTM_filter CCTM::filter()] function to convert each value in the array into an image tag via the [to_image_tag_OutputFilter to_image_tag] Output Filter


=== Example 5: Retrieving Multiple Images ===

Any time you use the "repeatable" option, you'll want to use the [to_array_OutputFilter to_array] Output Filter.  The trick with this example is passing the name of another output filter to the *to_array* filter's argument: each item in the array is processed with the filter you specify:


{{{
<?php
$array_of_images = get_custom_field('my_images:to_array', 'to_image_src');

foreach ($array_of_images as $img) {
   print $img;
}
}}}

Note here that we are using a foreach loop to iterate over the array, and we're using the [CCTM_filter CCTM::filter()] function to convert each value in the array into an image tag via the [to_image_tag_OutputFilter to_image_tag] Output Filter


=== Example 5: All an Image's Data ===

Sometimes you may want to get more info about the image than just its src or h or w.  You can use the [get_post_OutputFilter get_post] output filter to get ALL attributes from another post.  Remember that an image is just another type of post.  Remember that the *guid* is the image src.

{{{
<?php $img = get_custom_field('my_image:get_post'); ?>
<img src="<?php print $img['guid']; ?>" title="<?php print $img['post_title']; ?>" />
}}}

=== Example 6: All an Image's Data ===

Just like example 5, but with multiple images: you want all the image data, but for an _array_ of images.  There are LOTS of ways to do this: remember, *the fundamental problem is converting an image's id to information you need*.  

{{{
<?php 
$images = get_custom_field('my_image:to_array', 'get_post'); 
foreach($images as $img) {
?>
    <img src="<?php print $img['guid']; ?>" title="<?php print $img['post_title']; ?>" />
<?php  
}
?>
}}}

See also the similar question in the [http://code.google.com/p/wordpress-custom-content-type-manager/wiki/FAQ#I_used_a_Multi-Relation_field_to_select_3_other_posts.__How_do_p FAQ] -- remember: *images are just a different kind of post*.

The other image data is buried deeper, unfortunately.


=== Recommended Output Filters ===

 * [to_array_OutputFilter to_array] (if you have "repeatable" checked).
 * [to_image_tag_OutputFilter to_image_tag]  for converting to a full `<img>` HTML tag.
 * [to_image_src_OutputFilter to_image_src]  for retrieving the src of the image being referenced.
 * [to_image_array_OutputFilter to_image_array]  for retrieving the width, height, and src of the image.

----

== Customizing Manager HTML ==

See [CustomizingManagerHTML] for more information on customizing the appearance of the manager HTML.

==== Field tpl====

The first of following tpls found will be used to format the field:

 # `fields/elements/{fieldname}.tpl`
 # `fields/elements/_image.tpl`
 # `fields/elements/_default.tpl`

==== Wrapper tpl ====

The first of the following tpls found will be used to wrap the output:

 # `fields/wrappers/{fieldname}.tpl`
 # `fields/wrappers/_image.tpl`
 # `fields/wrappers/_relation.tpl`

=== Multi ===

Image fields can be repeatable.  If the "repeatable" option is checked, the following tpls are used to format the output:


==== Field tpl====

The first of following tpls found will be used to format the field:

 # `fields/elements/{fieldname}.tpl`
 # `fields/elements/_image_multi.tpl`

==== Wrapper tpl ====

The first of the following tpls found will be used to wrap the output:

 # `fields/wrappers/{fieldname}.tpl`
 # `fields/wrappers/_image_multi.tpl`