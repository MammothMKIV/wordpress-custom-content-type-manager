#summary Documentation for Hidden custom fields
#labels Custom-Fields
#sidebar SidebarCustomFields


||http://s18.postimg.org/5l9pckpf9/hidden.png||Hidden fields store data out of site from users, useful if you need to keep your UI tidy.  They can also execute PHP to dynamically calculate values.||

<wiki:toc max_depth="2" />

----

== Field Definition (Meta Data)==

The field definition affects how instances of this field type will display in the !WordPress manager while creating or posts that contain instances of this field type.

 * *label* : the label identifies this field when you create or edit a post in the !WordPress manager
 * *name* : the name is a unique identifier used when saving values for instances of this field; it corresponds to the *meta_key* column *wp_postmeta* table.  You will use this name when retrieving field values inside of your themes via the `print_custom_field()` or `get_custom_field()` functions.
 * *description* : the description provides extra information to users as they create or edit a post in the !WordPress manager.
 * *class* : this affects the CSS class in the !WordPress manager that is used to display instances of this field type.
 * *extra* : this can be used to provide additional parameters to the text input, e.g. `size="10"` or custom javascript.. 
 * *default_value* : This is used to determine the default value for new instances of this field type. 
 * *output_filter* : [OutputFilters Output Filters] control how data is filtered before being sent to your theme files.
 * *evaluate_create_value* : if checked, the PHP code in the *create_value_code* textarea will be evaluated when the post containing this field is first created (i.e. it runs once only).
 * *evaluate_update_value* : if checked, the PHP code in the *update_value_code* textarea will be evaluated when the post containing this field is edited.
 * *evaluate_onsave* : if checked, the PHP code in the *onsave_code* textarea will be evaluated when the post containing this field is saved.
 * *create_value_code* : any PHP code that returns a value.  Runs only if the *evaluate_create_value* box is checked.
 * *update_value_code* : any PHP code that returns a value. Runs only if the *evaluate_update_value* box is checked.
 * *onsave_code* : any PHP code that returns a value. Runs only if the *evaluate_onsave* box is checked.

----

== Included Javascript/CSS files ==

NONE.

----

== Examples ==

Hidden fields usually store basic values, so they can usually be printed quite easily, without modification:

=== Use in your Template File ===

{{{
<?php print_custom_field('my_hidden'); ?>
}}}


== Generating a Value on Create==

In your field definition, check "Evaluate !OnCreate".

Add PHP code to the "!OnCreate" text area, e.g. this code to choose a random number between 1 and 100.

{{{
return rand(1,100);
}}}

This code is only executed once per post: when the post is first created -- the code executes as the form is _drawn_ (not as it is submitted).  After that, it will not execute again.

== Generating a Value on Edit ==

In your field definition, check "Evalate !OnEdit".

Add PHP code to the "!OnEdit" text area, e.g. this code to get the current timestamp

{{{
return date('Y-m-d H:i:s');
}}}

This code every time the edit form is _drawn_ (not as it is submitted).


== Calculate Values on Save ==

Perhaps the most powerful option is to calculate a value when the form is saved -- this occurs when either a "create" or an "edit" form is saved, so it overlaps with both of the previous events.  This code executes after the form is submitted, so it's a good place to calculate and modify content based on other values.

Note that the `$_POST` array is populated, but that all the CCTM's custom fields will be prefixed with a constant defined by `CCTM_FormElement::post_name_prefix`.  For example, if you have a custom field named `firstname`, it would appear in the `$_POST` array keyed as `cctm_firstname`.  

Another important thing to note is that any repeatable fields will appear as _arrays_ in the `$_POST` array.  For example, if you have a repeatable field named *email* to store a person's one (or many) emails, then the `$_POST` array would contain a bit like this:

{{{
Array
(
// ... other posted values here ...
  [cctm_email] => Array
        (
            [0] => some@email.com
        )
)
}}}

=== Example 1: Concatenate Two Fields ===

Let's say we want to concatenate 2 submitted fields into one.  *first_name* and *last_name* with a space in between.

In your field definition, check "Evalate !OnSave"./

Add PHP code to the "!OnSave" text area, e.g. this code to get the current timestamp

{{{
$value = sprintf('%s %s', 
    CCTM::get_value($_POST, CCTM_FormElement::post_name_prefix.'first_name'),
    CCTM::get_value($_POST, CCTM_FormElement::post_name_prefix.'last_name')
);
return trim($value);
}}}

Note a couple of the CCTM functions used here:

 * `CCTM::get_value()` -- used to safely get an item out of an array, without the PHP notices that occur if the index does not exist.  Pass it the `$array` you wish to search, the `$key` you want to retrieve, and optionally, you can pass it a default value for the third argument.
 * `CCTM_FormElement::post_name_prefix` -- this is the constant that is used to ensure that the CCTM's custom fields do not conflict with any !WordPress custom fields.

This code every time the post form is submitted.

=== Example 2: Calculate a Total ===

Here's another scenario: you have custom fields with numbers in them, and you want to display a total to your user.  To do this, you need to use PHP to do the math, and then you need to edit your tpls to make the total visible.

{{{
$a = (int) CCTM::get_value($_POST, CCTM_FormElement::post_name_prefix.'number1', 0);
$b = (int) CCTM::get_value($_POST, CCTM_FormElement::post_name_prefix.'number2', 0);
return $a + $b;
}}}

The above example assumes that fields *number1* and *number2* are _integers_ (no decimals), so it uses _(int)_ type-casting to force the values to be integers.

If you're dealing with decimals or other numbers, you would want to omit the _(int)_ type-cast and rely on `is_numeric()` or some other function to validate the input.  Keep in mind that when data is posted on a form, it comes through to PHP as strings (i.e. all data typing is lost).

If you're working with several related fields, you may want to store your calculations back in the `$_POST` array so you don't have to repeat calculations in each field, e.g.

{{{
// ... do calculations...
$_POST[ CCTM_FormElement::post_name_prefix.'my_total'] = $my_total;
return $my_total;
}}}

|| http://s2.postimage.org/by3ngezo/warning_icon.png || If your PHP code has errors in it, when the form is saved and it executes, you may just get a white screen, or you may see errors displayed on the page (depending on your logging settings). Test your code carefully!||




=== Recommended Output Filters ===

None.

----

== Customizing Manager HTML ==

Hidden fields use the 2 standard tpls: field and wrapper.  See [CustomizingManagerHTML] for more information.

==== Field tpl====

The first of following tpls found will be used to format the field:

 * `fields/elements/{fieldname}.tpl`
 * `fields/elements/_hidden.tpl`
 * `fields/elements/_default.tpl`

==== Wrapper tpl ====

The first of the following tpls found will be used to wrap the output:

 # `fields/wrappers/{fieldname}.tpl`
 # `fields/wrappers/_hidden.tpl`
 # `fields/wrappers/_default.tpl`