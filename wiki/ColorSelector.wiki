#summary Color-selector fields allow users to select an HTML color code using a visual selector
#labels Custom-Fields
#sidebar SidebarCustomFields

== Overview ==

||http://s9.postimage.org/la64smtfv/colorselector.png ||Color-selector text fields use a bit of !JavaScript to allow users to pick a color visually ([http://blog.meta100.com/post/600571131/mcolorpicker mColorPicker]).||

----

== Field Definition (Meta Data)==

The field definition affects how instances of this field type will display in the !WordPress manager while creating or posts that contain instances of this field type.

 * *label* : the label identifies this field when you create or edit a post in the !WordPress manager
 * *name* : the name is a unique identifier used when saving values for instances of this field; it corresponds to the *meta_key* column *wp_postmeta* table.  You will use this name when retrieving field values inside of your themes via the `print_custom_field()` or `get_custom_field()` functions.
 * *description* : the description provides extra information to users as they create or edit a post in the !WordPress manager.
 * *class* : this affects the CSS class in the !WordPress manager that is used to display instances of this field type.
 * *extra* : this can be used to provide additional parameters to the text input, e.g. `size="10"` or custom javascript.. 
 * *default_value* : This is used to determine the default value for new instances of this field type. 

----

== Output in Theme Files: Output Filters ==

===None===

_string_ *get_custom_field*( string _$fieldname_  ) 

In the case of a text field with no output filter, `print_custom_field('fieldname');` will return exactly the string that was was entered in the !WordPress manager and stored in the database.  The output is identical to 

{{{
global $post;
print get_post_meta($post->ID, $fieldname, true);
}}}