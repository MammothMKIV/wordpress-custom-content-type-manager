#summary Multi-Select fields let you select more than one item.
#labels Custom-Fields
#sidebar SidebarCustomFields


||http://s8.postimage.org/hud1ssltt/multiselect.png||Multi-select fields are used to store a list of multiple values. The values are encoded as a JSON array.||

<wiki:toc max_depth="2" />

----

== Field Definition (Meta Data)==

The field definition affects how instances of this field type will display in the !WordPress manager while creating or posts that contain instances of this field type.

 * *label* : the label identifies this field when you create or edit a post in the !WordPress manager
 * *name* : the name is a unique identifier used when saving values for instances of this field; it corresponds to the *meta_key* column *wp_postmeta* table.  You will use this name when retrieving field values inside of your themes via the `print_custom_field()` or `get_custom_field()` functions.
 * *description* : the description provides extra information to users as they create or edit a post in the !WordPress manager.
 * *class* : this affects the CSS class in the !WordPress manager that is used to display instances of this field type.
 * *extra* : this can be used to provide additional parameters to the text input, e.g. `size="10"` or custom javascript.. 
 * *default_value* : This is used to determine the default value for new instances of this field type. 
 * *output_filter* : [OutputFilters Output Filters] -- you'll need to use a filter that handles arrays, e.g. [to_array_OutputFilter to_array], or [formatted_list_OutputFilter formatted_list]

----

== Included Javascript/CSS files ==

 * `/js/dropdown.js`  (Requires jquery) 

----

== Example of Use  in Template File ==

MultiSelects always contain an array of data, so you always have to handle them as an array of data.

=== Example 1: Simple Array ===

{{{
<?php 
$my_array = get_custom_field('my_multiselect:to_array'); 
foreach ($my_array as $item) {
    print $item . '<br/>';
}
?>
}}}

=== Example 2: Formatted List ===

{{{
<?php 
print_custom_field('my_multiselect:formatted_list', ','); 
// will join each value with a comma, e.g. "dog, cat, man"
?>
}}}

=== Example 3: Another Formatted List ===

{{{
print_custom_field('my_multiselect:formatted_list', array('<li>[+value+]</li>','<ul>[+content+]</ul>') );
/* prints a formated unordered list:
<ul>
  <li>man</li>
  <li>bear</li>
  <li>pig</li>
</ul>
*/}}}




=== Recommended Output Filters ===

 * [to_array_OutputFilter to_array] 
 * [formatted_list_OutputFilter formatted_list] 

----

== Customizing Manager HTML ==

MultiSelect fields are the odd duck here.  THey use the 2 tpls: option and wrapper.  See [CustomizingManagerHTML] for more information.

==== Option tpl====

The first of following tpls found will be used to format the field:

 * `fields/options/{fieldname}.tpl`
 * `fields/options/_multiselect.tpl`
 * `fields/options/_checkbox.tpl`

==== Wrapper tpl ====

The first of the following tpls found will be used to wrap the output:

 # `fields/wrappers/{fieldname}.tpl`
 # `fields/wrappers/_multiselect.tpl`
 # `fields/wrappers/_default.tpl`