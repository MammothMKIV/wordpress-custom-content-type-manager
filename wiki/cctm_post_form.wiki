#summary Displays a post creation form on the front end
#labels Shortcodes

Starting with CCTM version 0.9.7.1, you can display a post-creation form on the front end of your site.  This is a beta version with limited functionality only.  See the section below on Limitations.

|| http://s2.postimage.org/by3ngezo/warning_icon.png || Displaying forms on the front-end of your site is dangerous!  Forms are often the vector of hacking attacks.  Use this feature with extreme caution. || 

= Usage =

{{{
 [cctm_post_form post_type="movie"]
}}}

== Required Arguments ==

 * post_type : you need to specify which post-type you want to use. This tells the CCTM which custom-fields it needs to draw.

== Default Arguments ==

It's extremely important that you watch your content here.  By default, the post_status is set to be "draft" in order to force all posts created via this method to be in draft status so that they will REQUIRE admin approval before being publicly visible. 

 * post_status="draft"

== Optional Arguments ==

Any other field value can be specified manually in your shortcode arguments, and these values will override anything posted in the form.  For example, if you want each form submitted on the front-end to be specially flagged, you might have a custom field named "source" which you can set via your shortcode call:

{{{
 [cctm_post_form post_type="feedback" source="front-end"]
}}}

Any built-in !WordPress column is available as a shortcode attribute, as well as any custom field name you've defined for your post-type (see the limitations below).

------

= Limitations =

Letting the general public submit content to your site is potentially *very* dangerous.  There are some limitations here that exist specifically for the protection of you and your site.  In future versions some of these restrictions may change as safe work-arounds are developed.

== Shortcode Attributes ==

There is a bug (a "feature"?) in !WordPress: <font color="red">*all* shortcode parameters must use only lowercase letters and underscores.</font>  If you try to pass custom field names as shortcode arguments and the attributes use upper-case letters or numbers, the shortcode will not work!  This is not well-documented!

This restriction is for your field NAME, not for the LABEL.  The field name is what identifies it uniquely in the database, not what you display to your users in the !WordPress admin.  And this limitation only comes up if you need to hard-code a value for your field as a shortcode argument.  

For example, I have a post_type named "feedback" with a custom field named "Big5".  The following shortcode would fail:

{{{
[cctm_post_form post_type="feedback" Big5="I am lost"]
}}}

!WordPress will misinterpret and rename the "Big5" variable, so when CCTM tries to find a value for your "Big5" field, it will not find the value.  

The solution is to use a different name for your field, e.g. "big_five".  Then you can use the shortcode normally:

{{{
[cctm_post_form post_type="feedback" big_five="I am found"]
}}}

== Post Content and WYSIWYG ==

The main content !WordPress block (ie. post_content field) relies on the !TinyMCE editor with numerous plugins that let you do things such as upload media or reference other posts.  For security reasons, this cannot be supported on the front-end!  You do not want the general public to have this kind of access to other parts of your site!

Unfortunately, the WYSIWYG editor that !WordPress uses inside the manager is not easily implemented in other areas of the site. 

For now, only plain textarea fields can be used for WYSIWYG fields.  In the future, the CCTM may integrate a simplified WYSIWYG editor for the post_content and any WYSIWYG fields, e.g. https://code.google.com/p/jwysiwyg/wiki/Introduction

== Image, Media, and Relation fields ==

For security reasons, the form does not currently support these fields: image and media fields are not supported because they would offer the general public the unfettered ability to upload assets to your server, and relation fields are not supported because they may list posts that are not intended for public viewing (e.g. posts in draft status or posts in a non-public post_type).

== Filtering ==

When content is submitted via the *cctm_post_form* shortcode from the front-end of a site, the [kses http://codex.wordpress.org/Function_Reference/wp_kses] filter is applied to *all* inputs.  This is a stricter filter than what is used inside the !WordPress manager: it filters out all HTML.  Inside the manager, the post_content normally uses the more relaxed [wp_kses_post http://codex.wordpress.org/Function_Reference/wp_kses_post] filter, but since this form is shown on the front-end, the source of the data is considered untrusted.