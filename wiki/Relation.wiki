#summary Documentation for Relation custom fields
#labels Custom-Fields
#sidebar SidebarCustomFields

= Description =

||http://s12.postimage.org/bztgulut5/relation.png||The relation field stores an integer foreign key to another post of some kind: post, page, or a media attachment like an image or video.||

What do you do with that integer that's stored?  You probably want the _post_ that integer represents, so you'll want to use !WordPress' *get_post()* function:

http://codex.wordpress.org/Function_Reference/get_post

Try something like this in your template:
`$related_post = get_post( get_custom_field('my_relation') );` 


== Overview ==

Relation fields are used to store a foreign key reference to another post of some kind. 

----

== Field Definition (Meta Data)==

The field definition affects how instances of this field type will display in the !WordPress manager while creating or posts that contain instances of this field type.

 * *label* : the label identifies this field when you create or edit a post in the !WordPress manager
 * *name* : the name is a unique identifier used when saving values for instances of this field; it corresponds to the *meta_key* column *wp_postmeta* table.  You will use this name when retrieving field values inside of your themes via the `print_custom_field()` or `get_custom_field()` functions.
 * *description* : the description provides extra information to users as they create or edit a post in the !WordPress manager.
 * *class* : this affects the CSS class in the !WordPress manager that is used to display instances of this field type.
 * *extra* : this can be used to provide additional parameters to the text input, e.g. `size="10"` or custom javascript.. 
 * *default_value* : This is used to determine the default value for new instances of this field type. 
 * *output_filter* : [OutputFilters Output Filters] control how data is filtered before being sent to your theme files. This field type supports the following output filters: none, to_image_src, to_image_tag, to_image_array

----

== Output in Theme Files: Output Filters ==

===None===

_integer_ *get_custom_field*( string _$fieldname_  ) 

|| http://s2.postimage.org/by3ngezo/warning_icon.png || In the case of a relation field with no output filter, `print_custom_field('fieldname');` will return _an integer number_ representing the ID of the post that has been referenced!  || 

The output is identical to:

{{{
global $post;
print get_post_meta($post->ID, $fieldname, true);
}}}

This has caused some confusion and ultimately it lead to the introduction of [OutputFilters Output Filters] in version 0.8.9 because usually you don't want the numerical ID, you want some attributes from the post that it _represents_.  The following Output Filters are here to help you.  In your custom field definition, select one of the following (available in versions 0.8.9 and greater).

----

===Full link `<a>` tag===

_string_ *get_custom_field*( string _$fieldname_,  `[`, string _$link_text_ `]`) 

When the *Full link `<a>` tag* output filter is selected, the output of the `print_custom_field('fieldname');` function is a full anchor tag containing pointing to the post referenced. If the optional *$link_text* option is not provided, the title of the post is used.  The output is the same as putting the following in your theme files:

{{{
global $post;
$related_post_id = get_post_meta($post->ID, $fieldname, true);
$RelatedPost = get_post($related_post_id);
print '<a href="'.$RelatedPost->guid.'">'.$RelatedPost->post_title.'</a>';
}}}

*Options* 

 * *$link_text* : enter the text you want to be clickable in your link, e.g. `print_custom_field('fieldname','Click Here');`


----

===Link href only===

When the *Link href only* output filter is selected, the output of the `print_custom_field('fieldname');`function is the full path to to the related post, ideal for use inside of an anchor tag.  The returned result relies on the referenced image's *guid* attribute and is identical to putting the following in your theme file:

{{{
global $post;
$related_post_id = get_post_meta($post->ID, $fieldname, true);
$RelatedPost = get_post($related_post_id);
print $RelatedPost->guid;
}}}