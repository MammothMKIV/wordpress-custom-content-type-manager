#summary Functions available to your theme files

Below are the functions available to your theme files so you can print out the values stored in your custom fields into your custom templates.  Some functions also return information _about_ the custom fields.

See includes/functions.php for more information.

<wiki:toc max_depth="1" />

<hr/>
= get_all_fields_of_type =

_array_ *get_all_fields_of_type*( string _$type_ `[`, string _$prefix_ `]` ) 

This function was originally developed to return all the images attached to a post. The output is an array of names, each name is the name of a custom field of the type specified.

=== $type ===
(string) (required) The type of custom field.  Possible values include checkbox, dropdown, media, relation, text, textarea, wysiwyg.

=== $prefix ===
(string) (optional) Identify a subset of fields by the beginning of their names.


<hr/>
= get_custom_field =

_string_ *get_custom_field*( string _$fieldname_ ) 

Gets the value of the custom field identified by _$fieldname_. This function is a convenience function that ties into !WordPress' [http://codex.wordpress.org/Function_Reference/get_post_meta get_post_meta()] function. This plugin prohibits requires that each custom field has a unique name (i.e. a key), whereas the !WordPress _get_post_meta()_ function allows for multiple rows to exist with the same key.

=== $fieldname ===         
(string) (required) The name of the custom field whose value you want to get.
 
<hr/>
= get_custom_field_meta =

_mixed_ *get_custom_field_meta*( string _$fieldname_, string _$item_ `[`, string _$post_type_ `]` ) 

This allows you to get information about the custom field's definition (i.e. its meta data). The definitions are stored in a multi-dimensional array, so we need 3 pieces of data to find the meta data: the fieldname, the name of the meta item, and the post type; the post_type is usually able to be determined automatically.

=== $fieldname ===         
(string) (required) The name of the custom field whose value you want to get.

=== $item ===         
(string) (required) The name of the definition item for this custom field whose value you want to get.

=== $post_type ===         
(string) (optional) The post_type containing the custom fields whose meta data you are trying to retrieve. Usually this can be determined automatically.

== Example ==

Examples are included in this Plugin's administration page: just click the link for "Show Sample Templates".

`<?php print get_custom_field('my_custom_field'); ?>`


<hr/>
= get_custom_field_def =

_array_ *get_custom_field_def*( string _$fieldname_ `[`, string _$post_type_ `]` ) 

Whereas the _get_custom_field_meta()_ function returns a single meta item from a field definition, the _get_custom_field_def()_ function returns the _entire_ definition array. 

=== $fieldname ===         
(string) (required) The name of the custom field whose value you want to get.

=== $post_type ===         
(string) (optional) The post_type containing the custom fields whose meta data you are trying to retrieve. Usually this can be determined automatically.

== Example ==

Put the following in one of your theme files, e.g. *single-test.php*:
`<?php print_r( get_custom_field_def('my_dropdown') ); ?>`

The output might be something like this:

{{{
Array
(
    [label] => My Dropdown
    [name] => my_dropdown
    [description] => Just an example desc
    [type] => dropdown
    [options] => Array
        (
            [0] => Male
            [1] => Female
        )

    [default_value] => Female
    [sort_param] => 2
)
}}}


<hr/>

= get_custom_field =

_string_ *get_custom_field*( string _$fieldname_ ) 

Gets the value of the custom field identified by _$fieldname_. This function is a convenience function that ties into !WordPress' [http://codex.wordpress.org/Function_Reference/get_post_meta get_post_meta()] function. This plugin prohibits requires that each custom field has a unique name (i.e. a key), whereas the !WordPress _get_post_meta()_ function allows for multiple rows to exist with the same key.

=== $fieldname ===         
(string) (required) The name of the custom field whose value you want to get.
 
<hr/>
= get_custom_field_meta =

_mixed_ *get_custom_field_meta*( string _$fieldname_, string _$item_ `[`, string _$post_type_ `]` ) 

This allows you to get information about the custom field's definition (i.e. its meta data). The definitions are stored in a multi-dimensional array, so we need 3 pieces of data to find the meta data: the fieldname, the name of the meta item, and the post type; the post_type is usually able to be determined automatically.

=== $fieldname ===         
(string) (required) The name of the custom field whose value you want to get.

=== $item ===         
(string) (required) The name of the definition item for this custom field whose value you want to get.

=== $post_type ===         
(string) (optional) The post_type containing the custom fields whose meta data you are trying to retrieve. Usually this can be determined automatically.

== Example ==

Examples are included in this Plugin's administration page: just click the link for "Show Sample Templates".

`<?php print get_custom_field('my_custom_field'); ?>`


<hr/>
= get_custom_image =

_Deprecated in 0.8.9_

This was the wrong solution to the problem: update your templates to use get_custom_field() and adjust your [OutputFilters Output Filters] for the field in question.

See also the [Image] wiki page.

<hr/>
= get_post_complete =

_object_ *get_post_complete*( integer _$id_ ) 

This gets a _complete_ post, including all custom fields.

=== $id ===
(integer) (required) The ID of the post whose data you want.

== Example ==

{{{
<?php $my_post = get_post_complete(123); ?>
<a href="<?php print $my_post->guid; ?>"><?php print $my_post->post_title; ?></a>
<?php print $my_post->my_custom_field; ?>
}}}

<hr/>
= get_posts_sharing_custom_field_value =

_array_ *get_posts_sharing_custom_field_value*( string _$fieldname_, string _$value_ ) 

Returns an array of post objects (including all custom fields).  This relies on the _get_post_complete()_ function (see this page), but it is a database intensive operation.  

For a more efficient query that returns the same type of results (including more search options), please see the [http://wordpress.org/extend/plugins/summarize-posts/ SummarizePosts] plugin.

=== $fieldname ===
(string) (required) The name of the custom field.

=== $value ===
(string) (required) The value being searched for.

== Example ==

{{{
$posts = get_posts_sharing_custom_field_value('genre', 'comedy');	
foreach ($posts as $p)
{
	print $p->post_title;
}

}}}

<hr/>
= get_relation =

_object_ *get_relation*( string _$fieldname_ ) 

A relation field stores a post ID, and that ID identifies another post.  So given 
a fieldname, this returns the complete post object for that was referenced by
the custom field.

=== $fieldname ===
(string) (required) The name of the custom field.

== Example ==

{{{
<?php
$my_related_post = get_relation('my_rel');
print $my_related_post->post_content;
?>
}}}

<hr/>
= get_unique_values_this_custom_field =

_array_ *get_unique_values_this_custom_field*( string _$fieldname_ ) 

Given a specific custom field name ($fieldname), return an array of all unique
values contained in this field by *any* published posts which use a custom field 
of that name, regardless of post_type, and regardless of whether or not the custom 
field is defined as a "standardized" custom field.

This function filters out empty or null values.

=== $fieldname ===
(string) (required) The name of the custom field.

== Example == 

{{{
$array = get_unique_values_this_custom_field('favorite_cartoon');
print_r($array);
// prints something like : Array ( 'Family Guy', 'South Park', 'The Simpsons' );
}}}

<hr/>
= print_custom_field =

_Deprecated in 0.8.9_

This was the wrong solution to the problem: update your templates to use get_custom_field() and adjust your [OutputFilters Output Filters] for the field in question.

See also the [Image] wiki page.

<hr/>
= print_custom_field_meta =

This is a convenience function that simple prints the output of the [TemplateFunctions#get_custom_field_meta  get_custom_field_meta()] function.

= print_custom_image =

This is a convenience function that simple prints the output of the [TemplateFunctions#get_custom_image  get_custom_image()] function.