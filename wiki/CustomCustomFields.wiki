#summary Developing your Own Custom Field Types
#labels Custom-Fields
#sidebar SidebarDevelopers

<wiki:toc max_depth="1" />

= Description =

Starting with version 0.9.4, developers can create their own PHP classes that describe their own custom fields.  You can use this feature to write your own types of custom fields, just like with [CustomOutputFilters Custom Output Filters].

--------
= Where to Save =

Put your field classes inside your custom fields directory, which by default is `wp-content/uploads/cctm/fields`.  That directory will be scanned for additional classes.  (If you've customized the location of your uploads directory, then move the `tpls` directory into your custom location)

|| http://s2.postimage.org/by3ngezo/warning_icon.png || <font color="red">WARNING</font>: do not add files to the `wp-content/plugins/custom-content-type-manager/fields` directory!  Any files you add there will get deleted when the plugin is updated!||

After you've added a field class to this folder, you can clear the CCTM cache: CCTM --> clear Cache.

--------

= The Base Class =

`CCTM_FormElement` is an abstract class that defines the behavior for all custom fields.

By looking at the base class inside of `wp-content/plugins/custom-content-type-manager/includes/CCTM_FormElement.php`, you can see the following variables and methods.  Here's a brief description of each relevant variable and function.

=== <font color="green">protected $props</font> ===

_array_ : an associative array that defines which properties each instance of the field will have.
	
===<font color="green">public function admin_init()</font>===

_void_ *admin_init*()

Override this function to register any necessary CSS/!JavaScript required by your field.  For examples, look at the *relation.php* field.

===<font color="green">public function get_create_field_definition()</font>===

_string_ *public function get_create_field_definition*()

This should return (not print) form elements that handle all the controls required to define this type of field.  Normally, you shouldn't need to implement this function.  Usually implementing the *get_edit_field_definition()* is enough.

===<font color="red">abstract</font> <font color="green">public get_edit_field_definition()</font>===

_string_ *get_edit_field_definition*($current_values)

This should return (not print) form elements that handle all the controls required to edit the field definition.  

<font color="red">You MUST implement this function.</font>

===<font color="red">abstract</font> <font color="green">public function get_name();</font>===

_string_ *get_name*()

This should return (not print) the common name of the field, e.g. "Text", "Dropdown", etc. 

<font color="red">You MUST implement this function.</font>


===<font color="red">abstract</font> <font color="green">public function get_url();</font>===

_string_ *get_url*()

This should return (not print) a full link to where users can get information about this type of field, e.g. `http://code.google.com/p/wordpress-custom-content-type-manager/wiki/Image`

<font color="red">You MUST implement this function.</font>


===<font color="green">public function get_icon();</font>===

_string_ *get_icon*()

Return URL to a 48x48 PNG image that should represent this type of field. e.g. `http://mysite/images/coolio.png`

________

= Sample Field Class =

== Naming Conventions ==

 * Name your files in _all lowercase_!
 * Do not use any spaces or dashes in the name!
 * The name of the class _must_ correspond exactly to the base name of the file.  The classname will have a prefix of `CCTM_` and it will not use the ".php" extension.  E.g. if your field is named `my_field`, then your filename would be `my_field.php` and your classname will be `CCTM_my_field`.

MORE COMING...